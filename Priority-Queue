#include<stdio.h>
struct priority{
int data;
int priority;
};
struct priority pq[100];
int front=-1,rear=-1,size=100;
void enqueue(int item, int priority){
if(rear==size-1)
{
printf("Overflow");
}
else
{
if(front==-1)
{
front=0;
rear=0;
pq[rear].data=item;
pq[rear].priority=priority;
printf("%d\n",item);
}
else
{
rear++;
pq[rear].data=item;
pq[rear].priority=priority;
printf("%d\n",item);
}
}
}
void dequeue(){
int item;
if(front==-1||front>rear)
{printf("Underflow");}
else
{item=pq[front].data;
printf("%d\n",item);
front++;}
}
void display(){
int item;
if(front==-1)
{printf("Empty");}
else
{item=pq[front].data;
printf("Priority queue:\n");
for(int i=front;i<=rear;i++)
{
printf("Data:%d,Priority:%d\n",pq[i].data,pq[i].priority);}}}


void sort(){
int i,j;
struct priority temp;
if(rear!=0){
or(int i=front;i<=rear;i++)
{
for(int j=front;j<rear;j++)
{if(pq[j].priority>pq[j+1].priority)
{
temp=pq[j];
pq[j]=pq[j+1];
pq[j+1]=temp;
}
}
}
}
}


int main(){
int choice;
int item,priority;
do
{
printf("<<CHOICES>>\n");
printf("1.Enqueue\n2.Dequeue\n3.Display\n4.Exit\n");
printf("Enter your choice:");
scanf("%d",&choice);
switch(choice){
case 1:
printf("Enter the element:");
scanf("%d",&item);
printf("Enter its priority:");
scanf("%d",&priority);
enqueue(item,priority);
sort();
break;
case 2:
dequeue();
break;
case 3:
display();
break;
case 4:
printf("Exiting!!\n");
break;
default:
printf("Invalid choice\n");
break;
}
}while(choice!=4);
return 0; 
}
